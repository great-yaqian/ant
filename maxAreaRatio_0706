;; for dejoa:

connectivity = list(
list("M5" "RDV" "RDL"    )
list("M4" "V4"  "M5"       )
list("M3" "V3"  "M4"       )
list("M2" "V2"  "M3"       )
list("M1" "V1"  "M2"       )
list("TCP" "CT" "M1"      )
list("M0U" "CT" "M1"      )
list("MT2" "PCU" "M0U"   )
list("M0C" "PCU" "M0U"   )
;list("AT4" "PC1" "M0C"   )
list("AT4" "PC1" "MT2"   )
;list("PG" "PC2" "M0C"    )
list("PG" "PC2" "MT2"    )
)

PD = list(
    list(list("AT4" "NCH") list("NSD" "drawing"))
    list(list("AT4" "PCH") list("PSD" "drawing"))
    )

GATE = list(
    list(list("AT4" "NCH") list("PG" "NCH"))
    list(list("AT4" "PCH") list("PG" "PCH"))
    )

Vias = list( "RDV" "V4" "V3" "V2" "V1" "CT" "PCU" "PC1" "PC2" )

grid = 0.00025

    libName         =   "ANT_QA_Pcell"
    cellName        =   "MaxAreaRatio"
    cellview        =   "maskLayout"

;procedure(createMaxAreaRatio
    ;( @key
    ;(libName            "ANT_QA_Pcell")
    ;(cellName           "MaxAreaRatio")
    ;(cellview           "maskLayout")
    ;(Obj1isVia          nil           )
    ;(Obj1Layer          "PG_drawing")
    ;(Obj1isCumulative          nil           )
    ;(GateConnectedPD    nil )
    ;)

    pcDefinePCell( list(ddGetObj(libName) cellName "layout" cellview)
        (;parameters:
            ;(libName           string   "ANT_QA_Pcell")
            ;(cellName          string   "MaxAreaRatio")
            ;(cellview          string   "maskLayout")
            ;(Obj1isVia         boolean   nil           )
            (Obj1Layer         string    "M1_drawing")
            (Obj1isCumulative  boolean       nil           )
            (GateConnectedPD   boolean       nil )
            (Ratio             float          200 )
            (PDarea            float          1 )
            (GateisThin        boolean       t)
            (thinLayer         string       "DGX_drawing")
            (thickLayer        string       "KGX_drawing")
            )

        ;layer1 = list()
        obj1 =  parseString(Obj1Layer "_" )
        layer_all = geFindLayerPath("PG" car(obj1) connectivity)
        ;passedLayers = myButlast(layer_all)

        PGgroup = dbCreateGroup( pcCellView "PGgroup" list("set" "ordered"))
        
        gate_y = 1.0
        gate_x = 1.0
        gate_l = 0.5
        gate_w = 2.0
        
        firstPG1 = dbCreateRect(pcCellView cadr(car(GATE)) list(gate_x:gate_y gate_x+gate_l:gate_y*3+gate_w))
        firstPG12 = dbCreateRect(pcCellView car(car(GATE)) list(gate_x-gate_l:gate_y+gate_l gate_x+gate_l*2:gate_y+gate_l+gate_w))

        if(GateisThin 
            then dgx = dbCreateRect(pcCellView parseString(thinLayer "_") list(gate_x-1:gate_y gate_x+gate_l*3:gate_y+gate_l*2+gate_w)  )
            else kgx = dbCreateRect(pcCellView parseString(thickLayer "_") list(gate_x-1:gate_y gate_x+gate_l*3:gate_y+gate_l*2+gate_w)  )
            );if

        if(GateConnectedPD
            then PD1 = dbCreateRect(pcCellView list("AT4" "NCH")   list(gate_x/2:gate_y+gate_l*3+gate_w gate_x/2+1:gate_y+gate_l*3+gate_w+PDarea )    )
                 PD2 = dbCreateRect(pcCellView list("NSD" "drawing") list(gate_x/2:gate_y+gate_l*3+gate_w gate_x/2+1:gate_y+gate_l*3+gate_w+PDarea))
            )

        if(!Obj1isCumulative ;  && !memq(layer1 Vias) ;&& "PG"!=layer1
                    then for(x 0  length(layer_all)-2
                            orientX = gate_x + x
                            dbCreateRect(pcCellView list(nth(x layer_all) "drawing") list(orientX:0.5 orientX+2:1.5))
                            );for
                         dbCreateRect(pcCellView list(nth(length( layer_all)-1 layer_all) cadr(obj1)) list(orientX:0.5 orientX+Ratio+grid:1.5))
                         ;dbCreateRect(pcCellView list(nth(length( layer_all)-1 layer_all) cadr(obj1)) list(gate_x:gate_y+gate_w-gate_l gate_x+Ratio+grid:gate_y+gate_w-gate_l+1))
          );if
        
        )

   ;     )
            
procedure(myButlast(lst)
    if(!lst then
        nil 
    else
        reverse(cdr(reverse(lst))) 
    )
)

procedure( fastLastElement(lst)
    if( lst then
        let((len idx)
            len = length(lst)
            idx = len - 1
            nth(idx lst)  
        )
    )
)

let( ( cellId cdfId)
    cellId = ddGetObj(libName cellName)
    if( !cellId
        printf("error\n")
        ;error("Could'nt find cell %s." cellName)
        )
    when(cdfId = cdfGetBaseCellCDF(cellId)
        cdfDeleteCDF(cdfId)
        )
    cdfId = cdfCreateBaseCellCDF(cellId)

    cdfCreateParam(cdfId
        ?name       "Obj1Layer"
        ?prompt     "Obj1Layer"
        ?defValue   "M1_drawing"
        ?type       "string")

    cdfCreateParam(cdfId
        ?name       "Obj1isCumulative"
        ?prompt     "Obj1isCumulative"
        ?defValue   nil
        ?type       "boolean")

    cdfCreateParam(cdfId
        ?name       "GateConnectedPD"
        ?prompt     "GateConnectedPD"
        ?defValue   nil
        ?type       "boolean")
  
    cdfCreateParam(cdfId
        ?name       "PDarea"
        ?prompt     "PDarea"
        ?defValue   1.0
        ?type       "float"
        ?display    "cdfgData->GateConnectedPD->value"
        )

    cdfCreateParam(cdfId
        ?name       "GateisThin"
        ?prompt     "GateisThin"
        ?defValue   t
        ?type       "boolean")

    cdfCreateParam(cdfId
        ?name       "thinLayer"
        ?prompt     "thinLayer"
        ?defValue   "DGX_drawing"
        ?type       "string"
        ?display    "cdfgData->GateisThin->value"
        )

    cdfCreateParam(cdfId
        ?name       "thickLayer"
        ?prompt     "thickLayer"
        ?defValue   "KGX_drawing"
        ?type       "string"
        ?display    "!cdfgData->GateisThin->value"
        )


    cdfCreateParam(cdfId
        ?name       "Ratio"
        ?prompt     "Ratio"
        ?defValue   200.0
        ?type       "float")


        cdfSaveCDF(cdfId)
    )
            


procedure(geFindLayerPath(a b connectivity)
    prog( ()
    graph = makeTable("graph" nil)
    
    foreach(triplet connectivity
        layer1 = car(triplet)
        via = cadr(triplet)
        layer2 = caddr(triplet)
        
        if(graph[layer1] == nil then
            graph[layer1] = list(via)
        else
            graph[layer1] = cons(via, graph[layer1])
        )
        
        if(graph[via] == nil then
            graph[via] = list(layer1)
        else
            graph[via] = cons(layer1, graph[via])
        )
        
        if(graph[via] == nil then
            graph[via] = list(layer2)
        else
            graph[via] = cons(layer2, graph[via])
        )
        
        if(graph[layer2] == nil then
            graph[layer2] = list(via)
        else
            graph[layer2] = cons(via, graph[layer2])
        )
    )
    queue = list(list(a)) 
    visited = makeTable("visited" nil)
    visited[a] = t 
    
    while(queue != nil
        path = car(queue) 
        queue = cdr(queue)
        
        current = car(path) 
        
        if(current == b then
            path_re = reverse(path)
            return(path_re)
        )
        
        foreach(neighbor graph[current]
            if(visited[neighbor] == nil then 
                visited[neighbor] = t 
                newPath = cons(neighbor, path) 
                queue = append(queue, list(newPath))
            )
        )
    )
    
    )
)
            
